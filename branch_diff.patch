diff --git a/changes.diff b/changes.diff
new file mode 100644
index 0000000..e69de29
diff --git a/messages/de.json b/messages/de.json
new file mode 100644
index 0000000..b9d7cbc
--- /dev/null
+++ b/messages/de.json
@@ -0,0 +1,5 @@
+{
+  "Index": {
+    "title": "Hello world German!"
+  }
+}
diff --git a/messages/en.json b/messages/en.json
new file mode 100644
index 0000000..7196b33
--- /dev/null
+++ b/messages/en.json
@@ -0,0 +1,5 @@
+{
+  "Index": {
+    "title": "Hello world!"
+  }
+}
diff --git a/next.config.js b/next.config.js
index aa21c7c..9d0dc11 100644
--- a/next.config.js
+++ b/next.config.js
@@ -1,3 +1,6 @@
+const createNextIntlPlugin = require('next-intl/plugin');
+
+const withNextIntl = createNextIntlPlugin();
 const withPWA = require('next-pwa')({
   dest: 'public',
   disable: process.env.NODE_ENV === 'development',
@@ -6,10 +9,12 @@ const withPWA = require('next-pwa')({
 });
 
 /** @type {import('next').NextConfig} */
-module.exports = withPWA({
+const nextConfig = withPWA({
   swcMinify: true,
   reactStrictMode: true,
   eslint: {
     dirs: ['src'],
   },
 });
+
+module.exports = withNextIntl(nextConfig);
diff --git a/package.json b/package.json
index f4e3f13..212f7e3 100644
--- a/package.json
+++ b/package.json
@@ -24,6 +24,7 @@
   },
   "dependencies": {
     "@chakra-ui/anatomy": "^2.2.2",
+    "@chakra-ui/icons": "^2.1.1",
     "@chakra-ui/next-js": "^2.2.0",
     "@chakra-ui/react": "^2.8.2",
     "@chakra-ui/styled-system": "^2.9.2",
@@ -32,6 +33,7 @@
     "@emotion/styled": "^11.11.0",
     "framer-motion": "^11.0.14",
     "next": "^14.1.3",
+    "next-intl": "^3.15.0",
     "next-pwa": "^5.6.0",
     "react": "^18.2.0",
     "react-dom": "^18.2.0",
diff --git a/pnpm-lock.yaml b/pnpm-lock.yaml
index 26404b1..f9127be 100644
--- a/pnpm-lock.yaml
+++ b/pnpm-lock.yaml
@@ -8,6 +8,9 @@ dependencies:
   '@chakra-ui/anatomy':
     specifier: ^2.2.2
     version: 2.2.2
+  '@chakra-ui/icons':
+    specifier: ^2.1.1
+    version: 2.1.1(@chakra-ui/system@2.6.2)(react@18.2.0)
   '@chakra-ui/next-js':
     specifier: ^2.2.0
     version: 2.2.0(@chakra-ui/react@2.8.2)(@emotion/react@11.11.4)(next@14.1.3)(react@18.2.0)
@@ -32,6 +35,9 @@ dependencies:
   next:
     specifier: ^14.1.3
     version: 14.1.3(@babel/core@7.24.0)(react-dom@18.2.0)(react@18.2.0)
+  next-intl:
+    specifier: ^3.15.0
+    version: 3.15.0(next@14.1.3)(react@18.2.0)
   next-pwa:
     specifier: ^5.6.0
     version: 5.6.0(@babel/core@7.24.0)(next@14.1.3)(webpack@5.90.3)
@@ -1543,6 +1549,17 @@ packages:
       react: 18.2.0
     dev: false
 
+  /@chakra-ui/icons@2.1.1(@chakra-ui/system@2.6.2)(react@18.2.0):
+    resolution: {integrity: sha512-3p30hdo4LlRZTT5CwoAJq3G9fHI0wDc0pBaMHj4SUn0yomO+RcDRlzhdXqdr5cVnzax44sqXJVnf3oQG0eI+4g==}
+    peerDependencies:
+      '@chakra-ui/system': '>=2.0.0'
+      react: '>=18'
+    dependencies:
+      '@chakra-ui/icon': 3.2.0(@chakra-ui/system@2.6.2)(react@18.2.0)
+      '@chakra-ui/system': 2.6.2(@emotion/react@11.11.4)(@emotion/styled@11.11.0)(react@18.2.0)
+      react: 18.2.0
+    dev: false
+
   /@chakra-ui/image@2.1.0(@chakra-ui/system@2.6.2)(react@18.2.0):
     resolution: {integrity: sha512-bskumBYKLiLMySIWDGcz0+D9Th0jPvmX6xnRMs4o92tT3Od/bW26lahmV2a2Op2ItXeCmRMY+XxJH5Gy1i46VA==}
     peerDependencies:
@@ -2721,6 +2738,53 @@ packages:
     engines: {node: ^12.22.0 || ^14.17.0 || >=16.0.0}
     dev: true
 
+  /@formatjs/ecma402-abstract@1.18.3:
+    resolution: {integrity: sha512-J961RbhyjHWeCIv+iOceNxpoZ/qomJOs5lH+rUJCeKNa59gME4KC0LJVMeWODjHsnv/hTH8Hvd6sevzcAzjuaQ==}
+    dependencies:
+      '@formatjs/intl-localematcher': 0.5.4
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/ecma402-abstract@2.0.0:
+    resolution: {integrity: sha512-rRqXOqdFmk7RYvj4khklyqzcfQl9vEL/usogncBHRZfZBDOwMGuSRNFl02fu5KGHXdbinju+YXyuR+Nk8xlr/g==}
+    dependencies:
+      '@formatjs/intl-localematcher': 0.5.4
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/fast-memoize@2.2.0:
+    resolution: {integrity: sha512-hnk/nY8FyrL5YxwP9e4r9dqeM6cAbo8PeU9UjyXojZMNvVad2Z06FAVHyR3Ecw6fza+0GH7vdJgiKIVXTMbSBA==}
+    dependencies:
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/icu-messageformat-parser@2.7.8:
+    resolution: {integrity: sha512-nBZJYmhpcSX0WeJ5SDYUkZ42AgR3xiyhNCsQweFx3cz/ULJjym8bHAzWKvG5e2+1XO98dBYC0fWeeAECAVSwLA==}
+    dependencies:
+      '@formatjs/ecma402-abstract': 2.0.0
+      '@formatjs/icu-skeleton-parser': 1.8.2
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/icu-skeleton-parser@1.8.2:
+    resolution: {integrity: sha512-k4ERKgw7aKGWJZgTarIcNEmvyTVD9FYh0mTrrBMHZ1b8hUu6iOJ4SzsZlo3UNAvHYa+PnvntIwRPt1/vy4nA9Q==}
+    dependencies:
+      '@formatjs/ecma402-abstract': 2.0.0
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/intl-localematcher@0.2.32:
+    resolution: {integrity: sha512-k/MEBstff4sttohyEpXxCmC3MqbUn9VvHGlZ8fauLzkbwXmVrEeyzS+4uhrvAk9DWU9/7otYWxyDox4nT/KVLQ==}
+    dependencies:
+      tslib: 2.6.2
+    dev: false
+
+  /@formatjs/intl-localematcher@0.5.4:
+    resolution: {integrity: sha512-zTwEpWOzZ2CiKcB93BLngUX59hQkuZjT2+SAQEscSm52peDW/getsawMcWF1rGRpMCX6D7nSJA3CzJ8gn13N/g==}
+    dependencies:
+      tslib: 2.6.2
+    dev: false
+
   /@humanwhocodes/config-array@0.11.14:
     resolution: {integrity: sha512-3T8LkOmg45BV5FICb15QQMsyUSWrQ8AygVfC7ZG32zOalnqrilm018ZVCw0eapXux8FtA33q8PSRSstjee3jSg==}
     engines: {node: '>=10.10.0'}
@@ -5909,6 +5973,15 @@ packages:
       hasown: 2.0.2
       side-channel: 1.0.6
 
+  /intl-messageformat@10.5.14:
+    resolution: {integrity: sha512-IjC6sI0X7YRjjyVH9aUgdftcmZK7WXdHeil4KwbjDnRWjnVitKpAx3rr6t6di1joFp5188VqKcobOPA6mCLG/w==}
+    dependencies:
+      '@formatjs/ecma402-abstract': 2.0.0
+      '@formatjs/fast-memoize': 2.2.0
+      '@formatjs/icu-messageformat-parser': 2.7.8
+      tslib: 2.6.2
+    dev: false
+
   /invariant@2.2.4:
     resolution: {integrity: sha512-phJfQVBuaJM5raOpJjSfkiD6BpbCE4Ns//LaXl6wGYtUBY83nWS6Rf9tXm2e8VaK60JEjYldbPif/A2B1C2gNA==}
     dependencies:
@@ -6711,9 +6784,27 @@ packages:
     resolution: {integrity: sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==}
     dev: true
 
+  /negotiator@0.6.3:
+    resolution: {integrity: sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==}
+    engines: {node: '>= 0.6'}
+    dev: false
+
   /neo-async@2.6.2:
     resolution: {integrity: sha512-Yd3UES5mWCSqR+qNT93S3UoYUkqAZ9lLg8a7g9rimsWmYGK8cVToA4/sF3RrshdyV3sAGMXVUmpMYOw+dLpOuw==}
 
+  /next-intl@3.15.0(next@14.1.3)(react@18.2.0):
+    resolution: {integrity: sha512-mccmy6oIbgV3QY2GsgHrgRLoEYYVEIXa+hEaK6OBeG3zYJ+H5AACVBAhLcf+5ctY06RFr95hYt1XcJJ+bNtkag==}
+    peerDependencies:
+      next: ^10.0.0 || ^11.0.0 || ^12.0.0 || ^13.0.0 || ^14.0.0
+      react: ^16.8.0 || ^17.0.0 || ^18.0.0
+    dependencies:
+      '@formatjs/intl-localematcher': 0.2.32
+      negotiator: 0.6.3
+      next: 14.1.3(@babel/core@7.24.0)(react-dom@18.2.0)(react@18.2.0)
+      react: 18.2.0
+      use-intl: 3.15.0(react@18.2.0)
+    dev: false
+
   /next-pwa@5.6.0(@babel/core@7.24.0)(next@14.1.3)(webpack@5.90.3):
     resolution: {integrity: sha512-XV8g8C6B7UmViXU8askMEYhWwQ4qc/XqJGnexbLV68hzKaGHZDMtHsm2TNxFcbR7+ypVuth/wwpiIlMwpRJJ5A==}
     peerDependencies:
@@ -8355,6 +8446,16 @@ packages:
       tslib: 2.6.2
     dev: false
 
+  /use-intl@3.15.0(react@18.2.0):
+    resolution: {integrity: sha512-vPCa7nbmH3RLfsy4pLLag8PvlzxQYHd5CkPE/AobkX72NE7JjhXk9UFtuFmD1UWiwQzM7njysnuwQlhtV6vV2Q==}
+    peerDependencies:
+      react: ^16.8.0 || ^17.0.0 || ^18.0.0
+    dependencies:
+      '@formatjs/ecma402-abstract': 1.18.3
+      intl-messageformat: 10.5.14
+      react: 18.2.0
+    dev: false
+
   /use-sidecar@1.1.2(@types/react@18.2.66)(react@18.2.0):
     resolution: {integrity: sha512-epTbsLuzZ7lPClpz2TyryBfztm7m+28DlEv2ZCQ3MDr5ssiwyOwGH/e5F9CkfWjJ1t4clvI58yF822/GUkjjhw==}
     engines: {node: '>=10'}
diff --git a/src/app/api/hello/route.ts b/src/app/[locale]/api/hello/route.ts
similarity index 100%
rename from src/app/api/hello/route.ts
rename to src/app/[locale]/api/hello/route.ts
diff --git a/src/app/layout.tsx b/src/app/[locale]/layout.tsx
similarity index 65%
rename from src/app/layout.tsx
rename to src/app/[locale]/layout.tsx
index 7b39a40..7ba960d 100644
--- a/src/app/layout.tsx
+++ b/src/app/[locale]/layout.tsx
@@ -1,10 +1,13 @@
 import type { Metadata, Viewport } from 'next';
+import { NextIntlClientProvider } from 'next-intl';
+import { getMessages } from 'next-intl/server';
 
-import Providers from '~/app/providers';
+import Providers from '~/app/[locale]/providers';
 import Layout from '~/lib/layout';
 
 type RootLayoutProps = {
   children: React.ReactNode;
+  params: { locale: string };
 };
 
 const APP_NAME = 'nextarter-chakra';
@@ -42,16 +45,23 @@ export const viewport: Viewport = {
   themeColor: '#FFFFFF',
 };
 
-const RootLayout = ({ children }: RootLayoutProps) => {
+export default async function LocaleLayout({
+  children,
+  params: { locale },
+}: RootLayoutProps) {
+  // Providing all messages to the client
+  // side is the easiest way to get started
+  const messages = await getMessages();
+
   return (
-    <html lang="en">
+    <html lang={locale}>
       <body>
-        <Providers>
-          <Layout>{children}</Layout>
-        </Providers>
+        <NextIntlClientProvider messages={messages}>
+          <Providers>
+            <Layout>{children}</Layout>
+          </Providers>
+        </NextIntlClientProvider>
       </body>
     </html>
   );
-};
-
-export default RootLayout;
+}
diff --git a/src/app/manifest.ts b/src/app/[locale]/manifest.ts
similarity index 100%
rename from src/app/manifest.ts
rename to src/app/[locale]/manifest.ts
diff --git a/src/app/not-found.ts b/src/app/[locale]/not-found.ts
similarity index 100%
rename from src/app/not-found.ts
rename to src/app/[locale]/not-found.ts
diff --git a/src/app/page.ts b/src/app/[locale]/page.ts
similarity index 100%
rename from src/app/page.ts
rename to src/app/[locale]/page.ts
diff --git a/src/app/providers.tsx b/src/app/[locale]/providers.tsx
similarity index 100%
rename from src/app/providers.tsx
rename to src/app/[locale]/providers.tsx
diff --git a/src/i18n.ts b/src/i18n.ts
new file mode 100644
index 0000000..955e749
--- /dev/null
+++ b/src/i18n.ts
@@ -0,0 +1,14 @@
+import { notFound } from 'next/navigation';
+import { getRequestConfig } from 'next-intl/server';
+
+// Can be imported from a shared config
+const locales = ['en', 'de'];
+
+export default getRequestConfig(async ({ locale }) => {
+  // Validate that the incoming `locale` parameter is valid
+  if (!locales.includes(locale as string)) notFound();
+
+  return {
+    messages: (await import(`../messages/${locale}.json`)).default,
+  };
+});
diff --git a/src/lib/components/LanguageSwitcher.tsx b/src/lib/components/LanguageSwitcher.tsx
new file mode 100644
index 0000000..63091d2
--- /dev/null
+++ b/src/lib/components/LanguageSwitcher.tsx
@@ -0,0 +1,96 @@
+// components/LanguageSwitcher.tsx
+
+'use client';
+
+import { ChevronDownIcon } from '@chakra-ui/icons';
+import { Menu, MenuButton, MenuList, MenuItem, Button } from '@chakra-ui/react';
+import { useRouter, usePathname, useParams } from 'next/navigation';
+import { useState, useEffect } from 'react';
+
+const LanguageSwitcher = () => {
+  const router = useRouter();
+  const pathname = usePathname();
+  const params = useParams();
+  const locale = Array.isArray(params?.locale)
+    ? params?.locale[0]
+    : params?.locale || 'en'; // Get locale from params or default to 'en'
+
+  const [selectedLocale, setSelectedLocale] = useState(locale);
+
+  useEffect(() => {
+    setSelectedLocale(locale); // Sync state with current locale from params
+  }, [locale]);
+
+  const changeLanguage = (lng: string) => {
+    setSelectedLocale(lng);
+    const newPathname = pathname.replace(/^\/[a-z]{2}/, `/${lng}`);
+    router.push(newPathname);
+  };
+
+  const getFlagIcon = (lng: string) => {
+    switch (lng) {
+      case 'en':
+        return '🇬🇧'; // Use emoji flag for UK
+      case 'de':
+        return '🇩🇪'; // Use emoji flag for Germany
+      default:
+        return '🌐'; // Default globe icon
+    }
+  };
+
+  return (
+    <Menu>
+      <MenuButton
+        as={Button}
+        rightIcon={<ChevronDownIcon />}
+        bg="cream" // Define 'cream' color in your Chakra UI theme or use a suitable color
+        color="black" // Text color
+        border="2px solid black" // Border
+        borderBottomWidth="8px" // Denser border at the bottom
+        borderRadius="lg" // Rounded corners
+        position="relative" // Ensure the border doesn't overflow
+        overflow="hidden" // Ensure the border doesn't overflow
+        _hover={{
+          borderBottomColor: 'black', // Adjust hover color if needed
+        }}
+        _active={{
+          borderBottomColor: 'black', // Adjust active color if needed
+        }}
+        height="44px"
+        display="flex"
+        alignItems="center"
+        justifyContent="center"
+        fontWeight={700}
+      >
+        <span
+          style={{
+            color: 'white',
+            textShadow: '0px 0px 2px black',
+            WebkitTextStroke: '1px black', // Add border-like effect to the text
+          }}
+        >
+          {typeof selectedLocale === 'string' && selectedLocale.toUpperCase()}
+        </span>
+      </MenuButton>
+      <MenuList border="2px solid black" minWidth="85px" p={0}>
+        {['en', 'de'].map((lng) => (
+          <MenuItem
+            key={lng}
+            onClick={() => changeLanguage(lng)}
+            display="flex"
+            alignItems="center"
+            justifyContent="space-between"
+            _hover={{ bg: 'gray.200' }} // Hover background color
+            _focus={{ bg: 'gray.200' }} // Focus background color
+            p={2} // Adjust padding for the MenuItem if needed
+          >
+            <span style={{ marginRight: '2px' }}>{getFlagIcon(lng)}</span>
+            <span>{lng.toUpperCase()}</span>
+          </MenuItem>
+        ))}
+      </MenuList>
+    </Menu>
+  );
+};
+
+export default LanguageSwitcher;
diff --git a/src/lib/components/hooks/useLocale.ts b/src/lib/components/hooks/useLocale.ts
new file mode 100644
index 0000000..7f15ba6
--- /dev/null
+++ b/src/lib/components/hooks/useLocale.ts
@@ -0,0 +1,12 @@
+// hooks/useLocale.ts
+
+import { useParams } from 'next/navigation';
+
+const useLocale = () => {
+  const params = useParams();
+  return Array.isArray(params?.locale)
+    ? params?.locale[0]
+    : params?.locale || 'en';
+};
+
+export default useLocale;
diff --git a/src/lib/components/samples/SomeText.tsx b/src/lib/components/samples/SomeText.tsx
index 1f9bc4c..8511e88 100644
--- a/src/lib/components/samples/SomeText.tsx
+++ b/src/lib/components/samples/SomeText.tsx
@@ -1,10 +1,12 @@
 import { Grid, Heading, Text } from '@chakra-ui/react';
+import { useTranslations } from 'next-intl';
 
 const SomeText = () => {
+  const t = useTranslations('Index');
   return (
     <Grid textAlign="center">
       <Heading as="h1" size="lg">
-        nextarter-chakra
+        {t('title')}
       </Heading>
 
       <Text fontSize="xs">
diff --git a/src/lib/pages/home/index.tsx b/src/lib/pages/home/index.tsx
index 01ab444..ee856da 100644
--- a/src/lib/pages/home/index.tsx
+++ b/src/lib/pages/home/index.tsx
@@ -1,10 +1,21 @@
-import { Flex } from '@chakra-ui/react';
+'use client';
 
+import { Button, Flex } from '@chakra-ui/react';
+import { useRouter } from 'next/navigation';
+
+import useLocale from '~/lib/components/hooks/useLocale';
+import LanguageSwitcher from '~/lib/components/LanguageSwitcher';
 import CTASection from '~/lib/components/samples/CTASection';
 import SomeImage from '~/lib/components/samples/SomeImage';
 import SomeText from '~/lib/components/samples/SomeText';
 
 const Home = () => {
+  const router = useRouter();
+  const locale = useLocale();
+  const handleClick = () => {
+    router.push(`/${locale}/404`); // Navigate to 404 route with locale
+  };
+
   return (
     <Flex
       direction="column"
@@ -15,9 +26,11 @@ const Home = () => {
       mb={8}
       w="full"
     >
+      <LanguageSwitcher />
       <SomeText />
       <SomeImage />
       <CTASection />
+      <Button onClick={handleClick}>404</Button>
     </Flex>
   );
 };
diff --git a/src/lib/styles/themes/pro/components/tabs/index.ts b/src/lib/styles/themes/pro/components/tabs/index.ts
index d9826e3..9a5497d 100644
--- a/src/lib/styles/themes/pro/components/tabs/index.ts
+++ b/src/lib/styles/themes/pro/components/tabs/index.ts
@@ -1,5 +1,6 @@
 import { tabsAnatomy } from '@chakra-ui/anatomy';
 import { createMultiStyleConfigHelpers } from '@chakra-ui/styled-system';
+
 import { indicator } from './indicator.variant';
 import { underline } from './underline.variant';
 
diff --git a/src/middleware.ts b/src/middleware.ts
new file mode 100644
index 0000000..0a4d531
--- /dev/null
+++ b/src/middleware.ts
@@ -0,0 +1,14 @@
+import createMiddleware from 'next-intl/middleware';
+
+export default createMiddleware({
+  // A list of all locales that are supported
+  locales: ['en', 'de'],
+
+  // Used when no locale matches
+  defaultLocale: 'en',
+});
+
+export const config = {
+  // Match only internationalized pathnames
+  matcher: ['/', '/(de|en)/:path*'],
+};
